// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TE;
//
//    var nation = Nation.FromJson(jsonString);

namespace TE
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Nation
    {
        [JsonProperty("Country")]
        public string Country { get; set; }

        [JsonProperty("Category")]
        public string Category { get; set; }

        [JsonProperty("DateTime")]
        public DateTimeOffset DateTime { get; set; }

        [JsonProperty("Value")]
        public double Value { get; set; }

        [JsonProperty("Frequency")]
        public string Frequency { get; set; }

        [JsonProperty("HistoricalDataSymbol")]
        public string HistoricalDataSymbol { get; set; }

        [JsonProperty("LastUpdate")]
        public DateTimeOffset LastUpdate { get; set; }
    }

    public partial class Nation
    {
        public static List<Nation> FromJson(string json) => JsonConvert.DeserializeObject<List<Nation>>(json, TE.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<Nation> self) => JsonConvert.SerializeObject(self, TE.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
